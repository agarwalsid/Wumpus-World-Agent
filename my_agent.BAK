%my_agent.pl

%   this procedure requires the external definition of two procedures:
%
%     init_agent: called after new world is initialized.  should perform
%                 any needed agent initialization.
%
%     run_agent(percept,action): given the current percept, this procedure
%                 should return an appropriate action, which is then
%                 executed.
%
% This is what should be fleshed out

init_agent:-
  format('\n=====================================================\n'),
  format('This is init_agent:\n\tIt gets called once, use it for your initialization\n\n'),
  format('=====================================================\n\n'),

  retractall(agentLocation(_,_)),
  retractall(agentOrientation(_)),
  retractall(pitAt(_,_)),
  retractall(wumpusAt(_,_)),
  retractall(safeAt(_,_)),
  assert(agentLocation(1,1)),
  assert(agentOrientation(0)),
  assert(safeAt(1,1)).

run_agent(Percept,Action):-
format('\n=====================================================\n'),
  format('This is run_agent(.,.):\n\t It gets called each time step.\n\tThis default one simply moves forward\n'),
  format('You might find "display_world" useful, for your debugging.\n'),
  display_world,
  format('=====================================================\n\n'),

  nth1(1, Percept, A),
  nth1(2, Percept, B),
  nth1(3, Percept, C),
  nth1(4, Percept, D),
  nth1(5, Percept, E),
  agentLocation(M,N),
  M1 is M+1,
  M2 is M-1,
  N1 is N+1,
  N2 is N-1,


  write('Wumpus:'),write(A),
  (A == yes -> assert(wumpusAt(M1,N)),assert(wumpusAt(M2,N)),assert(wumpusAt(M,N1)),assert(wumpusAt(M,N2)); A = no),

  write('Pit:'),write(B),
  (B == yes -> assert(pitAt(M1,N)),assert(pitAt(M2,N)),assert(pitAt(M,N1)),assert(pitAt(M,N2)); B = no),

  (A == no, B == no -> assert(safeAt(M1,N)),assert(safeAt(M2,N)),assert(safeAt(M,N1)),assert(safeAt(M,N2)); F = no).


  (A == no, B == no-> Action=turnleft, write('C'), M is M + 1; F = no, write('B')).
